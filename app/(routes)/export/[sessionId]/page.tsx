  "use client"

  import type React from "react"

  import { useState, useEffect } from "react"
  import { useParams, useRouter } from "next/navigation"
  import { ArrowLeft, Download, Mail, FileText, Edit3, Eye } from "lucide-react"
  import { mockSessions, mockSummaries } from "@/lib/mockData"

  export default function ExportPage() {
    const params = useParams()
    const router = useRouter()
    const sessionId = (params?.sessionId ?? "") as string

    const [session, setSession] = useState<any>(null)
    const [report, setReport] = useState({
      title: "",
      summaries: mockSummaries,
      notes: "",
      includeComments: true,
      includeSources: true,
      template: "formal",
    })
    const [emailData, setEmailData] = useState({
      recipients: "",
      subject: "",
      message: "",
    })
    const [loading, setLoading] = useState(false)
    const [previewMode, setPreviewMode] = useState(true)

    useEffect(() => {
      const foundSession = mockSessions.find((s) => s.id === sessionId)
      if (foundSession) {
        setSession(foundSession)
        setReport((prev) => ({
          ...prev,
          title: `Research Report: ${foundSession.topic}`,
          notes: foundSession.document,
        }))
        setEmailData((prev) => ({
          ...prev,
          subject: `Research Report: ${foundSession.topic}`,
        }))
      }
    }, [sessionId])

    const handleDownloadPDF = () => {
      console.log("[v0] Generating PDF report:", report)

      // Mock PDF generation
      const reportData = {
        ...report,
        sessionId,
        generatedAt: new Date().toISOString(),
        metadata: {
          totalSummaries: report.summaries.length,
          collaborators: session?.collaborators || [],
          dateRange: session?.date,
        },
      }

      // Create a mock download
      const dataStr = JSON.stringify(reportData, null, 2)
      const dataBlob = new Blob([dataStr], { type: "application/json" })
      const url = URL.createObjectURL(dataBlob)

      const link = document.createElement("a")
      link.href = url
      link.download = `research-report-${sessionId}.json`
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      URL.revokeObjectURL(url)

      alert("Report downloaded! (Mock JSON file)")
    }

    const handleSendEmail = async (e: React.FormEvent) => {
      e.preventDefault()
      setLoading(true)

      try {
        console.log("[v0] Sending email report:", emailData)

        // Mock email sending
        await new Promise((resolve) => setTimeout(resolve, 1000))

        alert(`Report sent to: ${emailData.recipients}`)
        setEmailData({ recipients: "", subject: emailData.subject, message: "" })
      } catch (error) {
        console.error("Email sending failed:", error)
      } finally {
        setLoading(false)
      }
    }

    const formatReportContent = () => {
      const { template } = report

      if (template === "formal") {
        return `
  # ${report.title}

  **Generated:** ${new Date().toLocaleDateString()}
  **Session:** ${session?.topic}
  **Collaborators:** ${session?.collaborators.join(", ")}

  ## Executive Summary
  ${report.notes}

  ## Key Insights
  ${report.summaries
    .map(
      (summary, index) =>
        `${index + 1}. ${summary.content}${report.includeSources ? ` (Source: ${summary.source})` : ""}`,
    )
    .join("\n")}

  ## Methodology
  This report was generated using AI-powered research tools with collaborative input from team members.

  ---
  *Generated by AI Research Copilot*
        `
      } else {
        return `
  ${report.title}

  Date: ${new Date().toLocaleDateString()}

  Notes:
  ${report.notes}

  Key Points:
  ${report.summaries
    .map((summary, index) => `â€¢ ${summary.content}${report.includeSources ? ` [${summary.source}]` : ""}`)
    .join("\n")}
        `
      }
    }

    if (!session) {
      return (
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <div className="w-8 h-8 border-2 border-primary/30 border-t-primary rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-muted-foreground">Loading session...</p>
          </div>
        </div>
      )
    }

    return (
      <div className="min-h-screen bg-background">
        <div className="container mx-auto px-4 py-6">
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-4">
              <button
                onClick={() => router.push(`/dashboard/${sessionId}`)}
                className="p-2 hover:bg-accent rounded-md transition-colors"
              >
                <ArrowLeft size={20} />
              </button>
              <div>
                <h1 className="text-2xl font-bold">Export Report</h1>
                <p className="text-muted-foreground">{session.topic}</p>
              </div>
            </div>

            <div className="flex items-center gap-2">
              <button
                onClick={() => setPreviewMode(!previewMode)}
                className={`flex items-center gap-2 px-4 py-2 rounded-md transition-colors ${
                  previewMode ? "bg-secondary text-secondary-foreground" : "bg-primary text-primary-foreground"
                }`}
              >
                {previewMode ? <Edit3 size={18} /> : <Eye size={18} />}
                {previewMode ? "Edit" : "Preview"}
              </button>
            </div>
          </div>

          <div className="grid lg:grid-cols-3 gap-6">
            {/* Main Content */}
            <div className="lg:col-span-2">
              {previewMode ? (
                /* Preview Mode */
                <div className="bg-card border border-border rounded-lg p-8">
                  <div className="prose prose-invert max-w-none">
                    <pre className="whitespace-pre-wrap text-sm leading-relaxed">{formatReportContent()}</pre>
                  </div>
                </div>
              ) : (
                /* Edit Mode */
                <div className="bg-card border border-border rounded-lg p-6 space-y-6">
                  <div>
                    <label className="block text-sm font-medium mb-2">Report Title</label>
                    <input
                      type="text"
                      value={report.title}
                      onChange={(e) => setReport({ ...report, title: e.target.value })}
                      className="w-full px-3 py-2 border border-border rounded-md bg-background focus:ring-2 focus:ring-primary focus:border-transparent"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">Notes & Analysis</label>
                    <textarea
                      value={report.notes}
                      onChange={(e) => setReport({ ...report, notes: e.target.value })}
                      rows={8}
                      className="w-full px-3 py-2 border border-border rounded-md bg-background focus:ring-2 focus:ring-primary focus:border-transparent resize-none"
                      placeholder="Add your analysis and conclusions..."
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">Template Style</label>
                    <select
                      value={report.template}
                      onChange={(e) => setReport({ ...report, template: e.target.value })}
                      className="w-full px-3 py-2 border border-border rounded-md bg-background focus:ring-2 focus:ring-primary focus:border-transparent"
                    >
                      <option value="formal">Formal Report</option>
                      <option value="concise">Concise Summary</option>
                    </select>
                  </div>

                  <div className="space-y-3">
                    <div className="flex items-center gap-3">
                      <input
                        type="checkbox"
                        id="includeSources"
                        checked={report.includeSources}
                        onChange={(e) => setReport({ ...report, includeSources: e.target.checked })}
                        className="w-4 h-4 text-primary border-border rounded focus:ring-primary"
                      />
                      <label htmlFor="includeSources" className="text-sm">
                        Include source references
                      </label>
                    </div>

                    <div className="flex items-center gap-3">
                      <input
                        type="checkbox"
                        id="includeComments"
                        checked={report.includeComments}
                        onChange={(e) => setReport({ ...report, includeComments: e.target.checked })}
                        className="w-4 h-4 text-primary border-border rounded focus:ring-primary"
                      />
                      <label htmlFor="includeComments" className="text-sm">
                        Include team comments
                      </label>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Sidebar */}
            <div className="space-y-6">
              {/* Export Options */}
              <div className="bg-card border border-border rounded-lg p-6">
                <h3 className="font-semibold mb-4 flex items-center gap-2">
                  <Download size={18} />
                  Export Options
                </h3>

                <div className="space-y-3">
                  <button
                    onClick={handleDownloadPDF}
                    className="w-full flex items-center justify-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors"
                  >
                    <FileText size={18} />
                    Download Report
                  </button>

                  <p className="text-xs text-muted-foreground text-center">
                    Downloads as JSON file (PDF generation would be implemented in production)
                  </p>
                </div>
              </div>

              {/* Email Report */}
              <div className="bg-card border border-border rounded-lg p-6">
                <h3 className="font-semibold mb-4 flex items-center gap-2">
                  <Mail size={18} />
                  Email Report
                </h3>

                <form onSubmit={handleSendEmail} className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Recipients</label>
                    <input
                      type="text"
                      value={emailData.recipients}
                      onChange={(e) => setEmailData({ ...emailData, recipients: e.target.value })}
                      className="w-full px-3 py-2 text-sm border border-border rounded-md bg-background focus:ring-2 focus:ring-primary focus:border-transparent"
                      placeholder="email@example.com"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">Subject</label>
                    <input
                      type="text"
                      value={emailData.subject}
                      onChange={(e) => setEmailData({ ...emailData, subject: e.target.value })}
                      className="w-full px-3 py-2 text-sm border border-border rounded-md bg-background focus:ring-2 focus:ring-primary focus:border-transparent"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">Message</label>
                    <textarea
                      value={emailData.message}
                      onChange={(e) => setEmailData({ ...emailData, message: e.target.value })}
                      rows={3}
                      className="w-full px-3 py-2 text-sm border border-border rounded-md bg-background focus:ring-2 focus:ring-primary focus:border-transparent resize-none"
                      placeholder="Optional message..."
                    />
                  </div>

                  <button
                    type="submit"
                    disabled={loading || !emailData.recipients}
                    className="w-full bg-secondary text-secondary-foreground py-2 px-4 rounded-md hover:bg-secondary/80 disabled:opacity-50 transition-colors"
                  >
                    {loading ? "Sending..." : "Send Email"}
                  </button>
                </form>
              </div>

              {/* Report Stats */}
              <div className="bg-card border border-border rounded-lg p-6">
                <h3 className="font-semibold mb-4">Report Statistics</h3>

                <div className="space-y-3 text-sm">
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Insights</span>
                    <span>{report.summaries.length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Collaborators</span>
                    <span>{session.collaborators.length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Word Count</span>
                    <span>{report.notes.split(" ").length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Generated</span>
                    <span>{new Date().toLocaleDateString()}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }
